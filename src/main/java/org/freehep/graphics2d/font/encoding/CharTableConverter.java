// Copyright 2001-2009, FreeHEP.
package org.freehep.graphics2d.font.encoding;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.Writer;
import java.util.StringTokenizer;

/**
 * CharTableConverter class generates java files from given unicode formatted
 * txt file to use with Lookup class. Usage java CharTableConverter
 * encoding.unicode.txt [encoding type]
 * 
 * @author Sami Kama
 * @author Mark Donszelmann
 */
public class CharTableConverter {
	private BufferedReader textFile = null;
	private PrintWriter javaOut = null;
	private int encType = 1;

	public void putHeaders(String pkg, String className) throws IOException {
		javaOut.println("//Generated by CharTableConverter");
		javaOut.println("//!!DO NOT EDIT");
		javaOut.println("package " + pkg + ";");
		javaOut.println();
		javaOut.println("import java.util.HashMap;");
		javaOut.println("import java.util.Map;");
		javaOut.println();
		javaOut.println("/**");
		javaOut.println(" * Generated " + className + " Encoding Table.");
		javaOut.println(" *");
		javaOut
				.println(" * @author org.freehep.graphics2d.font.CharTableConverter");
		javaOut.println(" */");
		javaOut.println("public class " + className
				+ " extends AbstractCharTable {");
		javaOut.println("\tprivate Map<Character, String> unicodeToName = new HashMap<Character, String>();");
		javaOut.println("\tprivate Map<String, Character> nameToUnicode = new HashMap<String, Character>();");
		javaOut.println("\tprivate Map<String, Integer> nameToEnc = new HashMap<String, Integer>();");
		javaOut.println("\tprivate String[] encToName = new String[256];");
		javaOut.println("\tpublic " + className + "() {");
	}

	public void putMethods(String encoding, String tableName) throws IOException {

		javaOut.println("\tpublic String toName(Character c){");
		javaOut.println("\t\treturn unicodeToName.get(c);");
		javaOut.println("\t}");
		javaOut.println();
		javaOut.println("\tpublic String toName(int enc){");
		javaOut.println("\t\tif(enc!=0)");
		javaOut.println("\t\treturn encToName[enc];");
		javaOut.println("\t\treturn null;");
		javaOut.println("\t}");
		javaOut.println();
		javaOut.println("\tpublic int toEncoding(String name){");
		javaOut
				.println("\t\treturn nameToEnc.get(name).intValue();");
		javaOut.println("\t}");
		javaOut.println();
		javaOut.println("\tpublic char toUnicode(String name){");
		javaOut
				.println("\t\treturn nameToUnicode.get(name).charValue();");
		javaOut.println("\t}");
		javaOut.println();
		javaOut.println("\tpublic String getName(){");
		javaOut.println("\treturn \"" + tableName + "\";");
		javaOut.println("\t}");
		javaOut.println();
		javaOut.println("\tpublic String getEncoding(){");
		javaOut.println("\t	return \"" + encoding + "\";");
		javaOut.println("\t}");
		javaOut.println();
		javaOut.println("}");
		javaOut.flush();
		javaOut.close();
	}

	public void openFiles(File in, String outName) throws IOException {
		InputStream textIn = new FileInputStream(in);
		Reader textFileReader = new InputStreamReader(textIn, "UTF-16");

		File out = new File(outName);
		out.getParentFile().mkdirs();
		Writer javaFileWriter = new FileWriter(out);
		textFile = new BufferedReader(textFileReader);
		javaOut = new PrintWriter(javaFileWriter);
	}

	public void convertTxtToHash(String encoding) throws IOException {
		if (encoding.equals("ISO")) {
			encType = 5;
		}
		if (encoding.equals("PDF")) {
			encType = 4;
		}
		if (encoding.equals("WIN")) {
			encType = 3;
		}
		if (encoding.equals("MAC")) {
			encType = 2;
		}
		if (encoding.equals("STD")) {
			encType = 1;
		}

		String buff;
		while ((buff = textFile.readLine()) != null) {

			StringTokenizer st = new StringTokenizer(buff, "\u0009\u0020");

			if (!st.hasMoreTokens()) {
				continue;
			}
			String charCode = st.nextToken();
			if (charCode.equals("##")) {
				continue;
			}

			if (!st.hasMoreTokens()) {
				continue;
			}
			String charName = st.nextToken();

			String enc = "";
			for (int i = 0; i < encType; i++) {
				if (!st.hasMoreTokens()) {
					continue;
				}
				enc = st.nextToken();
			}

			String hexformat;
			if (charCode.startsWith("\\u")) {
				int cCL = charCode.length();
				javaOut.println();
				hexformat = charCode.substring(cCL - 4, cCL);
				javaOut.print("\t\t\t");
				javaOut.println("unicodeToName.put(new Character((char)0x"
						+ hexformat + "),\"" + charName + "\");");

				javaOut.print("\t\t\t");
				javaOut.println("nameToUnicode.put(\"" + charName + "\""
						+ ", new Character((char)0x" + hexformat + "));");

			} else {
				hexformat = "00"
						+ (Integer.toHexString(charCode.charAt(0)));
				javaOut.println();
				javaOut.print("\t\t\t");
				javaOut.println("unicodeToName.put(new Character((char)0x"
						+ hexformat.substring(hexformat.length() - 4, hexformat
								.length()) + "),\"" + charName + "\");");

				javaOut.print("\t\t\t");
				javaOut.println("nameToUnicode.put(\""
						+ charName
						+ "\""
						+ ",new Character((char)0x"
						+ hexformat.substring(hexformat.length() - 4, hexformat
								.length()) + "));");

			}

			Integer encodingInt = Integer.decode(enc);
			if (encodingInt.intValue() >= 0) {

				javaOut.print("\t\t\t");
				javaOut.println("nameToEnc.put(\"" + charName
						+ "\", new Integer(" + encodingInt + "));");

				javaOut.print("\t\t\t");
				javaOut.println("encToName[" + encodingInt + "]=\"" + charName
						+ "\";");
			}

		}

		javaOut.println();
		javaOut.println("\t\t}");
		javaOut.println();

	}

	public static void main(String args[]) throws IOException {

		if ((args.length < 3) || (args.length > 4)) {
			System.err
					.println("Usage: CharTableConverter destdir package txtfile [Encoding type]");
			System.exit(0);
		}
		CharTableConverter converter = new CharTableConverter();

		File src = new File(args[2]);

		String encoding = (args.length == 4) ? args[3] : "";

		String tableName = src.getName();
		int dot = tableName.indexOf('.');
		if (dot >= 0) {
			tableName = tableName.substring(0, dot);
		}

		String className = encoding + tableName;

		String pkg = args[1];

		String destFile = args[0] + File.separator
				+ pkg.replace('.', File.separatorChar) + File.separator
				+ className + ".java";

		converter.openFiles(src, destFile);
		converter.putHeaders(pkg, className);
		converter.convertTxtToHash(encoding);
		converter.putMethods(encoding, tableName);
	}

}
